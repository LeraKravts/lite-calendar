
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      DB_HOST: postgres       # üìå —è–≤–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –≤ docker-compose
      DB_PORT: ${POSTGRES_PORT} # üìå —è–≤–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –ë–î

  postgres:
    image: postgres:15
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data # üìå —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  apply-migration:
    build:
      context: .
      dockerfile: scripts/migration.Dockerfile
    image: migrations
    environment:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: postgres://postgres:super_secret_password@postgres:5432/calendar_db?sslmode=disable
    command: "-dir /app/migrations up"
    volumes:
      - ./migrations:/app/migrations
    depends_on:
      postgres:
        condition: service_healthy


volumes:
  postgres_data:



